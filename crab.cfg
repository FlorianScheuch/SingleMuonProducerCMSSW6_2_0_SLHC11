[CRAB]
jobtype = cmssw

scheduler = remoteGlidein
use_server = 0

[CMSSW]

### The data you want to access (to be found on DBS)
#datasetpath=/SingleMuGun_Pt-10to40/CMSSW_6_2_0_SLHC_11/GEN-SIM-DIGI-L1
datasetpath=None

### Name of the generator your MC job is using. Some generators require CRAB to skip events, others do not.
### Possible values are pythia (default), comphep, lhe, and madgraph. This will skip events in your generator input file.
generator=pythia

### Splitting parameters:
### Total number of events to be accessed: -1 means all
### NOTE: "-1" is not usable if no input
total_number_of_events=1000000

### Number of events to be processed per job
events_per_job = 10000

### Number of jobs to be created per task
#number_of_jobs = 5

### Analogous to events, lumis can be used to split up datasets
#total_number_of_lumis=1000
#lumis_per_job = 100

### The name of ParameterSet to be used
pset=SingleMuPt100_cfi_GEN_SIM_DIGI_L1_DIGI2RAW_RAW2DIGI.py

### The output files produced by your application (comma separated list)
output_file = DoubleMuPt10to40.root
allow_nonproductioncmssw = 1

[USER]

eMail = scheuch@physik.rwth-aachen.de

### OUTPUT file management ###
### To have back the job executable output into UI set return_data= 1
return_data = 0

### To specify the UI directory where to store the CMS executable output
### FULL path is mandatory. Default is  <ui_working_dir>/res will be used.
#outputdir= /full/path/yourOutDir

### To specify the UI directory where to store the stderr, stdout and .BrokerInfo of submitted jobs
### FULL path is mandatory. Default is <ui_working_dir>/res will be used.
#logdir= /full/path/yourLogDir

### To copy the CMS executable output into a SE set copy_data = 1
copy_data = 1
storage_element = T2_DE_RWTH

### To use the local stage out (local to the closeSE) in case of remote stage out failure.
### The publication of data is not supported with local_stage_out = 1. Work in progress
local_stage_out= 0

### To publish produced output in a local istance of DBS set publish_data = 1
publish_data=1
publish_data_name = scheuch

[GRID]

### Only with debug propose: to change the CMS-WMS to be used.
### By default CRAB takes the needed configuration files from the cmsdoc page
#rb = CERN

### To specify  VOMS role and/or group
#role = superman
#group = superheros

### To skip the CRAB check of your proxy
#dont_check_proxy = 1

### To add other requirements to jdl file, as example the Operating System
#requirements = (other.GlueHostOperatingSystemName == "RedHat")

### To add other parameters to jdl file: semicolon separated list;
#additional_jdl_parameters = AllowZippedISB = false

### To use a specific WMS end point put here the right name:
#wms_service=

### To specify a cpu time and wall_clock_time(=real time) in minutes
#max_cpu_time = 60
#max_wall_clock_time = 60

### To manage White/Black lists
### Use the dns domain (eg fnal, cern, ifae, fzk, cnaf, lnl,....) or the CMSSite name
### T1_US_FNAL. Only Tier2 centers have resources dedicated to user analysis.
### All the storage/computing elements (SE/CE) contained in the strings (comma separated list)
### will/will not be considered for submission.
### SE Black List:
se_black_list = T0,T1
### SE White List
#se_white_list = infn

### CE Black List:
#ce_black_list = infn
### CE White List:
#ce_white_list = infn

## fields written into jdl
virtual_organization = cms

### Temporary useful parameter to allow the WMSAuthorisation handling. Specifying skipwmsauth = 1
### the pyopenssl problems will disappear. It is needed working on gLite UI outside of CERN.
#skipwmsauth=1


[CONDORG]

# Set this to condor to override the batchsystem defined in gridcat.
#batchsystem = condor

# Specify addition condor_g requirments
# use this requirment to run on a cms dedicated hardare
# globus_rsl = (condor_submit=(requirements 'ClusterName == \"CMS\" && (Arch == \"INTEL\" || Arch == \"X86_64\")'))
# use this requirement to run on the new hardware
#globus_rsl = (condor_submit=(requirements 'regexp(\"cms-*\",Machine)'))

